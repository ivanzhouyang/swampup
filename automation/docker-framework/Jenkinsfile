#!/usr/bin/env groovy

node ('master') {
    def server = Artifactory.newServer url: SERVER_URL, credentialsId: CREDENTIALS
    stage ('check code'){
        git url: 'https://github.com/ivanzhouyang/project-examples.git'
    }
    
    stage ('Build and push war'){
        def rtMaven = Artifactory.newMavenBuild()
        def buildInfo = Artifactory.newBuildInfo()
        def Java_home=tool name: 'jdk1.8', type: 'jdk'
        env.JAVA_HOME=Java_home
        rtMaven.resolver server: server, releaseRepo: 'zhouyang-release-lib-vir', snapshotRepo: 'zhouyang-snapshot-lib-vir'
        rtMaven.deployer server: server, releaseRepo: 'zhouyang-local-release', snapshotRepo: 'zhouyang-local-snapshot'
        rtMaven.tool = 'maven'
        rtMaven.run pom: 'maven-example/pom.xml', goals: 'clean install', buildInfo: buildInfo
    }

//Clone example project from GitHub repository
    git url: 'https://github.com/ivanzhouyang/swampup.git', branch: 'master'
    def rtServer = Artifactory.server SERVER_ID
    def buildInfo = Artifactory.newBuildInfo()
    def tagName
    buildInfo.env.capture = true
    
//Fetch all depensencies from Artifactory
    stage('image Dependencies') {
        dir('automation/docker-framework') {
            try {
                println "Gather Java and Tomcat"
                def downloadSpec = """{
                    "files": [
                        {
                            "pattern": "zhouyang_generic/jdk-8u201-linux-x64.tar",
                            "target": "jdk/jdk-8-linux-x64.tar.gz",
                            "flat":"true"
                        },
                        {
                            "pattern": "zhouyang_generic/apache-tomcat-8.0.36.tar",
                            "target": "tomcat/apache-tomcat-8.tar.gz",
                            "flat":"true"
                        }
                    ]
                }"""

                rtServer.download (downloadSpec, buildInfo)
                if (fileExists('jdk/jdk-8-linux-x64.tar.gz') && fileExists('tomcat/apache-tomcat-8.tar.gz')) {
                    println "Downloaded dependencies"
                } else {
                    println "Missing Dependencies either jdk or tomcat - see listing below:"
                    sh 'ls -d */*'
                    throw new FileNotFoundException("Missing Dependencies")
                }
            } catch (Exception e) {
                println "Caught exception during resolution.  Message ${e.message}"
                throw e
            }
        }
    }

//#######################################    
    stage('image Build') {
        dir ('automation/docker-framework') {
            withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: CREDENTIALS, usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD']]) {
                    def rtDocker = Artifactory.docker server: rtServer
                    tagName = "${ARTDOCKER_REGISTRY}/docker-framework:${env.BUILD_NUMBER}"                    
                    def curlstr = "curl -u " + env.USERNAME + ":" + env.PASSWORD + " " + SERVER_URL
                    def warverstr=curlstr+ "api/search/latestVersion?g=org.jfrog.test&a=multi3&repos=zhouyang-local-snapshot"
                    sh warverstr +' > war/version.txt'
                    env.WARVER=readFile('war/version.txt')
                    def downloadSpec = """{
                       "files": [
                           {
                               "pattern": "zhouyang-local-snapshot/org/jfrog/test/multi3/"""+env.WARVER+"""/*.war",
                               "target": "war/webservice.war",
                                "flat":"true"
                           }
                          ]
                        }"""    
                   
                    println(downloadSpec)
                   rtServer.download(downloadSpec, buildInfo)

                    docker.build(tagName)
                    echo tagName
                    sleep 6
                    rtDocker.push(tagName,REPO, buildInfo)
                    sleep 2
                    rtServer.publishBuildInfo buildInfo
            }
        }
}


stage ('image Promote') {
        dir ('automation/docker-framework') {
            def promotionConfig = [
              'buildName'          : env.JOB_NAME,
              'buildNumber'        : env.BUILD_NUMBER,
              'targetRepo'         : PROMOTE_REPO,
              'comment'            : 'Framework test with latest version of application',
              'sourceRepo'         : SOURCE_REPO,
              'status'             : 'Released',
              'includeDependencies': false,
              'copy'               : true
            ]
            
            echo promotionConfig as String
            rtServer.promote promotionConfig
            reTagLatest (SOURCE_REPO)
            reTagLatest (PROMOTE_REPO)
         }
    }


stage('image deployment'){
         
              println("deploy docker")
              println("deploy docker-framework image")
              sh "ansible zhouyang -m command -a 'docker stop docker-framework'"
              sh "ansible zhouyang -m command -a 'docker rm docker-framework'"
              sh "ansible zhouyang -m command -a 'docker rmi zhouyang-docker.zyartifactory/docker-framework:latest'"
              sh "ansible zhouyang -m command -a 'docker run -d --name docker-framework -p 19999:8181 zhouyang-docker.zyartifactory/docker-framework:latest'"
            }
}


//*****************************************



def reTagLatest (targetRepo) {
     def BUILD_NUMBER = env.BUILD_NUMBER
     sh 'sed -E "s/@/$BUILD_NUMBER/" retag.json > retag_out.json'
     switch (targetRepo) {
          case PROMOTE_REPO :
              sh 'sed -E "s/TARGETREPO/${PROMOTE_REPO}/" retag_out.json > retaga_out.json'
              break
          case SOURCE_REPO :
               sh 'cat retag_out.json'
               sh 'SOURCE_REPO=$(echo $SOURCE_REPO)'
               sh 'sed -E "s/TARGETREPO/${SOURCE_REPO}/" retag_out.json > retaga_out.json'

               break
      }
      sh 'cat retaga_out.json'
      withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: CREDENTIALS, usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD']]) {
          def curlString = "curl -u " + env.USERNAME + ":" + env.PASSWORD + " " + SERVER_URL
          def regTagStr = curlString +  "/api/docker/$targetRepo/v2/promote -X POST -H 'Content-Type: application/json' -T retaga_out.json"
          println "Curl String is " + regTagStr
          sh regTagStr
      }
}
